package com.tela.login.seer.view;

import com.github.britooo.looca.api.core.Looca;
import com.tela.login.seer.controller.Conexao;
import com.tela.login.seer.model.Chat;
import com.tela.login.seer.model.Componente;
import com.tela.login.seer.model.Funcionario;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.SimpleEmail;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

public class Dash extends javax.swing.JFrame {
    private Funcionario funcionario;
    private List<Integer> componentes;
    /**
     * Creates new form Dash
     */
    public Dash() {
        initComponents();
    }
    
    public Dash(Funcionario funcionario){
        initComponents();
        this.funcionario = funcionario;
        this.componentes = new ArrayList();
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_bakcground = new javax.swing.JPanel();
        pnl_header = new javax.swing.JPanel();
        lbl_header = new javax.swing.JLabel();
        pnl_cpu = new javax.swing.JPanel();
        lbl_cpu = new javax.swing.JLabel();
        lbl_frequencia = new javax.swing.JLabel();
        lbl_uso = new javax.swing.JLabel();
        prg_cpu = new javax.swing.JProgressBar();
        pnl_ram = new javax.swing.JPanel();
        lbl_ram = new javax.swing.JLabel();
        lbl_em_uso = new javax.swing.JLabel();
        lbl_uso_ram = new javax.swing.JLabel();
        prg_ram = new javax.swing.JProgressBar();
        pnl_disco = new javax.swing.JPanel();
        lbl_disco = new javax.swing.JLabel();
        lbl_utilizado = new javax.swing.JLabel();
        lbl_all_discos = new javax.swing.JLabel();
        prg_disco = new javax.swing.JProgressBar();
        pnl_processo = new javax.swing.JPanel();
        lbl_nome_processo = new javax.swing.JLabel();
        lbl_status_processo = new javax.swing.JLabel();
        lbl_status_processo1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnl_bakcground.setBackground(new java.awt.Color(245, 245, 245));

        pnl_header.setBackground(new java.awt.Color(8, 20, 27));
        pnl_header.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 4, 0, new java.awt.Color(0, 204, 204)));

        lbl_header.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 45)); // NOI18N
        lbl_header.setForeground(new java.awt.Color(255, 255, 255));
        lbl_header.setText("SEER APPLICATION");

        javax.swing.GroupLayout pnl_headerLayout = new javax.swing.GroupLayout(pnl_header);
        pnl_header.setLayout(pnl_headerLayout);
        pnl_headerLayout.setHorizontalGroup(
            pnl_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_headerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_header)
                .addGap(84, 84, 84))
        );
        pnl_headerLayout.setVerticalGroup(
            pnl_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_headerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbl_header))
        );

        pnl_cpu.setBackground(new java.awt.Color(8, 20, 27));

        lbl_cpu.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        lbl_cpu.setForeground(new java.awt.Color(255, 255, 255));
        lbl_cpu.setText("CPU");
        lbl_cpu.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(255, 255, 255)));

        lbl_frequencia.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_frequencia.setForeground(new java.awt.Color(255, 255, 255));
        lbl_frequencia.setText("FrequÃªncia:");

        lbl_uso.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_uso.setForeground(new java.awt.Color(255, 255, 255));
        lbl_uso.setText("Uso:");

        prg_cpu.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        prg_cpu.setForeground(new java.awt.Color(0, 204, 204));
        prg_cpu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        prg_cpu.setStringPainted(true);

        javax.swing.GroupLayout pnl_cpuLayout = new javax.swing.GroupLayout(pnl_cpu);
        pnl_cpu.setLayout(pnl_cpuLayout);
        pnl_cpuLayout.setHorizontalGroup(
            pnl_cpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_cpuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_cpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_frequencia)
                    .addComponent(lbl_uso)
                    .addComponent(prg_cpu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnl_cpuLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(lbl_cpu))
        );
        pnl_cpuLayout.setVerticalGroup(
            pnl_cpuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_cpuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_cpu)
                .addGap(32, 32, 32)
                .addComponent(lbl_frequencia)
                .addGap(42, 42, 42)
                .addComponent(lbl_uso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg_cpu, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pnl_ram.setBackground(new java.awt.Color(8, 20, 27));
        pnl_ram.setPreferredSize(new java.awt.Dimension(278, 257));

        lbl_ram.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        lbl_ram.setForeground(new java.awt.Color(255, 255, 255));
        lbl_ram.setText("RAM");
        lbl_ram.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(255, 255, 255)));

        lbl_em_uso.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_em_uso.setForeground(new java.awt.Color(255, 255, 255));
        lbl_em_uso.setText("Em uso:");

        lbl_uso_ram.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_uso_ram.setForeground(new java.awt.Color(255, 255, 255));
        lbl_uso_ram.setText("Usando:");

        prg_ram.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        prg_ram.setForeground(new java.awt.Color(0, 204, 204));
        prg_ram.setStringPainted(true);

        javax.swing.GroupLayout pnl_ramLayout = new javax.swing.GroupLayout(pnl_ram);
        pnl_ram.setLayout(pnl_ramLayout);
        pnl_ramLayout.setHorizontalGroup(
            pnl_ramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ramLayout.createSequentialGroup()
                .addGroup(pnl_ramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ramLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(prg_ram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnl_ramLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(lbl_ram))
                    .addGroup(pnl_ramLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_em_uso))
                    .addGroup(pnl_ramLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_uso_ram)))
                .addContainerGap())
        );
        pnl_ramLayout.setVerticalGroup(
            pnl_ramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ramLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_ram)
                .addGap(32, 32, 32)
                .addComponent(lbl_em_uso)
                .addGap(42, 42, 42)
                .addComponent(lbl_uso_ram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg_ram, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pnl_disco.setBackground(new java.awt.Color(8, 20, 27));

        lbl_disco.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        lbl_disco.setForeground(new java.awt.Color(255, 255, 255));
        lbl_disco.setText("DISCO");
        lbl_disco.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(255, 255, 255)));

        lbl_utilizado.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_utilizado.setForeground(new java.awt.Color(255, 255, 255));
        lbl_utilizado.setText("Utilizado:");

        lbl_all_discos.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_all_discos.setForeground(new java.awt.Color(255, 255, 255));
        lbl_all_discos.setText("Todos discos:");

        prg_disco.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        prg_disco.setForeground(new java.awt.Color(0, 204, 204));
        prg_disco.setStringPainted(true);

        javax.swing.GroupLayout pnl_discoLayout = new javax.swing.GroupLayout(pnl_disco);
        pnl_disco.setLayout(pnl_discoLayout);
        pnl_discoLayout.setHorizontalGroup(
            pnl_discoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_discoLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(lbl_disco)
                .addGap(62, 62, 62))
            .addGroup(pnl_discoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_discoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prg_disco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_discoLayout.createSequentialGroup()
                        .addGroup(pnl_discoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_utilizado)
                            .addComponent(lbl_all_discos))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_discoLayout.setVerticalGroup(
            pnl_discoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_discoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_disco)
                .addGap(31, 31, 31)
                .addComponent(lbl_all_discos)
                .addGap(42, 42, 42)
                .addComponent(lbl_utilizado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg_disco, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pnl_processo.setBackground(new java.awt.Color(8, 20, 27));

        lbl_nome_processo.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        lbl_nome_processo.setForeground(new java.awt.Color(255, 255, 255));
        lbl_nome_processo.setText("SCADA");
        lbl_nome_processo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(255, 255, 255)));

        lbl_status_processo.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_status_processo.setForeground(new java.awt.Color(255, 255, 255));
        lbl_status_processo.setText("Status:");

        lbl_status_processo1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbl_status_processo1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnl_processoLayout = new javax.swing.GroupLayout(pnl_processo);
        pnl_processo.setLayout(pnl_processoLayout);
        pnl_processoLayout.setHorizontalGroup(
            pnl_processoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_processoLayout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(lbl_nome_processo)
                .addGap(54, 54, 54))
            .addGroup(pnl_processoLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(pnl_processoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_status_processo1)
                    .addComponent(lbl_status_processo)))
        );
        pnl_processoLayout.setVerticalGroup(
            pnl_processoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_processoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_nome_processo)
                .addGap(34, 34, 34)
                .addComponent(lbl_status_processo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_status_processo1)
                .addGap(99, 99, 99))
        );

        javax.swing.GroupLayout pnl_bakcgroundLayout = new javax.swing.GroupLayout(pnl_bakcground);
        pnl_bakcground.setLayout(pnl_bakcgroundLayout);
        pnl_bakcgroundLayout.setHorizontalGroup(
            pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_bakcgroundLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_disco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_cpu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_ram, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addComponent(pnl_processo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
            .addComponent(pnl_header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnl_bakcgroundLayout.setVerticalGroup(
            pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_bakcgroundLayout.createSequentialGroup()
                .addComponent(pnl_header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_cpu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_ram, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addGap(18, 30, Short.MAX_VALUE)
                .addGroup(pnl_bakcgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_disco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_processo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_bakcground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pnl_bakcground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Timer temporizador = new Timer();
    Looca maquina = new Looca();
    Componente componenteMaquina = new Componente();
    Chat bot = new Chat();
    

    public void gerarCpu() {
        Double cpuPorcentagem = maquina.getProcessador().getUso().doubleValue();
        cpuPorcentagem = Math.floor(cpuPorcentagem * 100) / 100;
        componenteMaquina.setCpuPorcentagem(cpuPorcentagem);
        lbl_uso.setText("Uso: " + cpuPorcentagem.toString() + "%");
        prg_cpu.setValue(cpuPorcentagem.intValue());

        Double cpuFreq = (maquina.getProcessador().getFrequencia().doubleValue()) / 1000000000;
        cpuFreq = Math.floor(cpuFreq * 100) / 100;
        componenteMaquina.setCpuFreq(cpuFreq);
        lbl_frequencia.setText("FrequÃªncia: " + cpuFreq.toString() + " GHz");
    }

    public void gerarRam() {
        Double ramUso = (maquina.getMemoria().getEmUso().doubleValue()) / 1073741824;
        ramUso = Math.floor(ramUso * 100) / 100;
        componenteMaquina.setRamUso(ramUso);
        lbl_em_uso.setText("Em uso: " + ramUso.toString() + " GB");

        Double ramTotal = (maquina.getMemoria().getTotal().doubleValue()) / 1073741824;
        ramTotal = Math.floor(ramTotal * 100) / 100;
        Double ramPorcentagem = ((ramUso / ramTotal) * 100);
        ramPorcentagem = Math.floor(ramPorcentagem * 100) / 100;
        componenteMaquina.setRamPorcentagem(ramPorcentagem);
        lbl_uso_ram.setText("Usando: " + ramPorcentagem.toString() + "%");
        prg_ram.setValue(ramPorcentagem.intValue());
    }

    public void gerarDisco() {
        Double totalVolume = maquina.getGrupoDeDiscos().getVolumes().get(0).getTotal().doubleValue();
        totalVolume = totalVolume / 1073741824;
        Double discoVolume = maquina.getGrupoDeDiscos().getVolumes().get(0).getDisponivel().doubleValue();
        discoVolume = discoVolume / 1073741824;
        Double usoVolume = (totalVolume - discoVolume);
        usoVolume = Math.floor(usoVolume * 100) / 100;
        lbl_utilizado.setText("Utilizado: " + usoVolume.toString() + " GB");

        Double discoUsoPorcentagem = ((usoVolume / totalVolume) * 100);
        discoUsoPorcentagem = Math.floor(discoUsoPorcentagem * 100) / 100;
        componenteMaquina.setDiscoUsoPorcentagem(discoUsoPorcentagem);
        prg_disco.setValue(discoUsoPorcentagem.intValue());

        //Percorrer todos os discos da maquina e somar a quantidade total de disco
        Integer tamanhoLista = maquina.getGrupoDeDiscos().getDiscos().size();
        Long total = 0L;
        for (Integer i = 0; i < tamanhoLista; i++) {
            Long disco1 = maquina.getGrupoDeDiscos().getDiscos().get(i).getTamanho();
            total += disco1;
        }
        total = total / 1073741824;
        lbl_all_discos.setText("Todos discos: " + total + " GB");
    }

    public void gerarProcesso() {
        Integer tamanho_lista_processos = maquina.getGrupoDeProcessos().getProcessos().size();
        String statusProcesso = "";
        String statusProcesso1 = "";
        
        for (Integer i = 0; i < tamanho_lista_processos; i++) {
            String nomeProcessoAtual = maquina.getGrupoDeProcessos().getProcessos().get(i).getNome();

            if (nomeProcessoAtual.equals("chrome")) {
                componenteMaquina.setNomeProcesso(nomeProcessoAtual);
                statusProcesso = "Ativo";
                statusProcesso1 = "";
                componenteMaquina.setStatusProcessoCompleto("Ativo");
                break;
            } else {
                componenteMaquina.setNomeProcesso("NÃ£o Encontrado");
                statusProcesso = "NÃ£o";
                statusProcesso1 = "Encontrado";
                componenteMaquina.setStatusProcessoCompleto("NÃ£o Encontrado");
            }
        }
        lbl_status_processo.setText("Status: " + statusProcesso);
        lbl_status_processo1.setText(statusProcesso1);
    }
    
    public void coletarComponentes(){
        List<Integer> desabilitar = new ArrayList();
        desabilitar.add(1);
        desabilitar.add(2);
        desabilitar.add(3);
        desabilitar.add(4);
        desabilitar.add(5);
        desabilitar.add(6);
        
        
        Conexao conexao = new Conexao();
        JdbcTemplate assistente = new JdbcTemplate(conexao.getBancoDeDados());
        
        String sql = "select fk_componente from componente_maquina where fk_maquina= 1";
        
         List<Componente> resposta = assistente.query(sql, new BeanPropertyRowMapper(Componente.class));
         
         System.out.println(resposta);
         for (Componente componete : resposta) {
             this.componentes.add(componete.getfkComponente());
             desabilitar.remove(componete.getfkComponente());
        }
         
        for (Integer componente: desabilitar) {
            switch(componente){
                case 1:
                    lbl_uso.setVisible(false);
                    prg_cpu.setVisible(false);
                    break;
                case 2:
                    lbl_frequencia.setVisible(false);
                    break;
                case 3:
                    pnl_disco.setVisible(false);
                    break;
                case 4:
                    lbl_uso_ram.setVisible(false);
                    prg_ram.setVisible(false);
                    break;       
                case 5:
                    lbl_em_uso.setVisible(false);
                    break;
                case 6:
                    pnl_processo.setVisible(false);
            }       
        }
        if(!lbl_uso.isVisible() && !lbl_frequencia.isVisible()){
            pnl_cpu.setVisible(false);
        }
        if(!lbl_uso_ram.isVisible() && !lbl_em_uso.isVisible()){
            pnl_ram.setVisible(false);
        }
        
    }
    
    public void insertBD(){
        coletarComponentes();
        List<String> colunas = new ArrayList();
        colunas.add("cpu_porcentagem"); 
        colunas.add("cpu_freq");
        colunas.add("disco_porcentagem");
        colunas.add("ram_porcentagem");
        colunas.add("ram_uso");
        colunas.add("nome_processo");
        colunas.add("status_processo");
        String registrar = "";
                
        for (Integer componente : this.componentes) {
            registrar+= colunas.get(componente-1)+",";
            if(componente == 6){
                registrar+= colunas.get(colunas.size()-1)+",";
            }
        }
        registrar+="data_hora,fk_maquina";
        
        gerarCpu();
        gerarDisco();
        gerarRam();
        gerarProcesso();
        alertas();
        
        List<Double> dadosColetadosNumeros = new ArrayList();
        dadosColetadosNumeros.add(componenteMaquina.getCpuPorcentagem()); 
        dadosColetadosNumeros.add(componenteMaquina.getCpuFreq());
        dadosColetadosNumeros.add(componenteMaquina.getDiscoUsoPorcentagem());
        dadosColetadosNumeros.add(componenteMaquina.getRamPorcentagem());
        dadosColetadosNumeros.add(componenteMaquina.getRamUso());
        
        
        String dadosInserir = "";
        for (Integer componente : this.componentes) {
            if (componente==6) {
                dadosInserir+= "'"+componenteMaquina.getNomeProcesso()+"','" +componenteMaquina.getStatusProcessoCompleto()+ "',";
                break;
            }
            dadosInserir+= dadosColetadosNumeros.get(componente-1)+",";
        }
        // Banco Local - MySQL;
        dadosInserir+="now(),1";
        
        //Banco Nuvem - Azure;
        //dadosInserir+="GETDATE(),1";

        Conexao conexao = new Conexao();
        JdbcTemplate assistente = new JdbcTemplate(conexao.getBancoDeDados());

        
        //InserÃ§Ã£o no banco;
        assistente.update(String.format("INSERT INTO medida_analytics(%s) VALUES (%s)", registrar,dadosInserir));
    this.componentes.clear();
    }

    public void enviarDados() {
        Integer delay = 0;
        Integer intervalo = 10000;

        temporizador.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                insertBD();
            }

        }, delay, intervalo);
    }

    public void alertas() {
        Double alertaCpuPorcetagemPerigo = 85.0;
        Double alertaDiscoPorcentagemPerigo = 90.0;
        Double alertaRamPorcetagemPerigo = 75.0;
        String alertaSoftwarePerigo = "NÃ£o Encontrado";

        if (componenteMaquina.getCpuPorcentagem() >= alertaCpuPorcetagemPerigo) {
            JOptionPane.showMessageDialog(null, "Sua CPU estÃ¡ crÃ­tica");
            enviarEmail();
        } if (componenteMaquina.getDiscoUsoPorcentagem() >= alertaDiscoPorcentagemPerigo) {
            JOptionPane.showMessageDialog(null, "Seu Disco estÃ¡ crÃ­tico");
            enviarEmail();
        } if (componenteMaquina.getRamPorcentagem() >= alertaRamPorcetagemPerigo) {
            JOptionPane.showMessageDialog(null, "Sua MemÃ³ria RAM estÃ¡ crÃ­tica");
            enviarEmail();
        } if (componenteMaquina.getStatusProcessoCompleto().equalsIgnoreCase(alertaSoftwarePerigo)) {
            JOptionPane.showMessageDialog(null, "Seu Software estÃ¡ crÃ­tico");
            enviarEmail();
        }
    }
    
    public void abrirChat(){
       bot.iniciar();
       bot.enterIframe();
       bot.buttonClick("button.tawk-margin-xsmall-left");
       bot.exitIframe();
       bot.enterIframe();
       bot.inputValue("//input[@aria-placeholder='Nome']",this.funcionario.getNome());
       bot.inputValue("//input[@aria-placeholder='E-mail']",this.funcionario.getLogin());
       bot.buttonClick("button.tawk-button-hover");
       bot.quit();
    }
    
    public void enviarEmail() {
        String meuEmail = "contato.inview@outlook.com";
        String minhaSenha = "inview@2021";
        String destinatario = "tickets@chamadochat.p.tawk.email";
        
        SimpleEmail email = new SimpleEmail();
        
        email.setHostName("smtp.office365.com");
        email.setSmtpPort(587);
        email.setAuthenticator(new DefaultAuthenticator(meuEmail, minhaSenha));
        email.setStartTLSEnabled(true);
        
        try {
            email.setFrom(meuEmail);
            email.setSubject("MÃ©trica de estaÃ§Ã£o de trabalho atingida!");
            email.setMsg("AtenÃ§Ã£o! A mÃ¡quina atingiu a mÃ©trica de alerta! "
                    + "Estamos abrindo um chamado e contatando o gestor responsÃ¡vel.");
            email.addTo(destinatario);
            email.send();
            System.out.println("E-mail foi enviado!");
        } catch (Exception e) {
            e.printStackTrace();
        }
        abrirChat();
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        enviarDados();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbl_all_discos;
    private javax.swing.JLabel lbl_cpu;
    private javax.swing.JLabel lbl_disco;
    private javax.swing.JLabel lbl_em_uso;
    private javax.swing.JLabel lbl_frequencia;
    private javax.swing.JLabel lbl_header;
    private javax.swing.JLabel lbl_nome_processo;
    private javax.swing.JLabel lbl_ram;
    private javax.swing.JLabel lbl_status_processo;
    private javax.swing.JLabel lbl_status_processo1;
    private javax.swing.JLabel lbl_uso;
    private javax.swing.JLabel lbl_uso_ram;
    private javax.swing.JLabel lbl_utilizado;
    private javax.swing.JPanel pnl_bakcground;
    private javax.swing.JPanel pnl_cpu;
    private javax.swing.JPanel pnl_disco;
    private javax.swing.JPanel pnl_header;
    private javax.swing.JPanel pnl_processo;
    private javax.swing.JPanel pnl_ram;
    private javax.swing.JProgressBar prg_cpu;
    private javax.swing.JProgressBar prg_disco;
    private javax.swing.JProgressBar prg_ram;
    // End of variables declaration//GEN-END:variables
}
